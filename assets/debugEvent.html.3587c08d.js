import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,a as e}from"./app.c3ca6d94.js";const t="/images/debug-event-1.png",o={},p=e(`<h1 id="调试时的事件" tabindex="-1"><a class="header-anchor" href="#调试时的事件" aria-hidden="true">#</a> 调试时的事件</h1><p>接口调试时分别触发<code>before</code>请求发起前事件，与<code>after</code>请求响应后事件。</p><p>可通过接口的注解来定义执行的事件，如下：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * @Apidoc\\Title (&quot;调试时事件&quot;)
 * @Apidoc\\Url(&quot;/admin/demo/debug&quot;)
 * @Apidoc\\Method(&quot;POST&quot;)
 * @Apidoc\\Param(&quot;username&quot;,type=&quot;string&quot;,desc=&quot;用户名&quot;)
 * @Apidoc\\Param(&quot;password&quot;,type=&quot;string&quot;,desc=&quot;密码&quot;)
 * @Apidoc\\Before(event=&quot;md5&quot;,key=&quot;password&quot;,value=&quot;body.password&quot;)
 * @Apidoc\\After(event=&quot;setGlobalHeader&quot;,key=&quot;Authorization&quot;,value=&quot;res.data.data.token&quot;,desc=&quot;用户登录Toekn&quot;)
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">debug</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上例子中，会执行以下事件：</p><p>1、请求发起前，将请求参数<code>password</code>进行md5（自定义事件）。</p><p>2、请求响应后，设置一个全局请求头参数<code>Authorization</code>，参数值为响应结果中返回数据中的<code>data.token</code>。</p><h2 id="before-after注解的参数" tabindex="-1"><a class="header-anchor" href="#before-after注解的参数" aria-hidden="true">#</a> Before|After注解的参数</h2><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>event</td><td>事件方法名，以下内置事件、及config.js配置的DEBUG_EVENTS自定义的方法名</td></tr><tr><td>name</td><td>事件名称，用于显示事件的名称</td></tr><tr><td>key</td><td>字段名</td></tr><tr><td>value</td><td>字段值，可直接设置值，或以<code>query.xxx</code>、<code>body.xxx</code>取请求参数中的值；以<code>res.xxx</code>取请求响应结果中的参数</td></tr><tr><td>desc</td><td>字段值描述</td></tr><tr><td>url</td><td>event为ajax时，定义请求地址</td></tr><tr><td>method</td><td>event为ajax时，定义请求类型</td></tr><tr><td>contentType</td><td>event为ajax时，定义contentType</td></tr></tbody></table><h2 id="内置事件" tabindex="-1"><a class="header-anchor" href="#内置事件" aria-hidden="true">#</a> 内置事件</h2><h3 id="setheader" tabindex="-1"><a class="header-anchor" href="#setheader" aria-hidden="true">#</a> setHeader</h3><blockquote><p><code>before</code>请求发起前有效</p></blockquote><p>设置一个请求头参数</p><p><code>@Apidoc\\Before(event=&quot;setHeader&quot;,key=&quot;参数名&quot;,value=&quot;参数值&quot;)</code></p><h3 id="setquery" tabindex="-1"><a class="header-anchor" href="#setquery" aria-hidden="true">#</a> setQuery</h3><blockquote><p><code>before</code>请求发起前有效</p></blockquote><p>设置一个请求Query参数</p><p><code>@Apidoc\\Before(event=&quot;setQuery&quot;,key=&quot;参数名&quot;,value=&quot;参数值&quot;)</code></p><h3 id="setbody" tabindex="-1"><a class="header-anchor" href="#setbody" aria-hidden="true">#</a> setBody</h3><blockquote><p><code>before</code>请求发起前有效</p></blockquote><p>设置一个请求参数</p><p><code>@Apidoc\\Before(event=&quot;setBody&quot;,key=&quot;参数名&quot;,value=&quot;参数值&quot;)</code></p><h3 id="clearheader" tabindex="-1"><a class="header-anchor" href="#clearheader" aria-hidden="true">#</a> clearHeader</h3><p>清除一个请求头参数</p><p><code>@Apidoc\\Before(event=&quot;clearHeader&quot;,key=&quot;参数名&quot;)</code></p><h3 id="clearquery" tabindex="-1"><a class="header-anchor" href="#clearquery" aria-hidden="true">#</a> clearQuery</h3><p>清除一个请求Query参数</p><p><code>@Apidoc\\Before(event=&quot;clearQuery&quot;,key=&quot;参数名&quot;)</code></p><h3 id="clearbody" tabindex="-1"><a class="header-anchor" href="#clearbody" aria-hidden="true">#</a> clearBody</h3><p>清除一个请求Body参数</p><p><code>@Apidoc\\Before(event=&quot;clearBody&quot;,key=&quot;参数名&quot;)</code></p><h3 id="setglobalheader" tabindex="-1"><a class="header-anchor" href="#setglobalheader" aria-hidden="true">#</a> setGlobalHeader</h3><p>设置一个全局请求头参数</p><p><code>@Apidoc\\After(event=&quot;setGlobalHeader&quot;,key=&quot;参数名&quot;,value=&quot;参数值&quot;,desc=&quot;参数描述&quot;)</code></p><h3 id="setglobalquery" tabindex="-1"><a class="header-anchor" href="#setglobalquery" aria-hidden="true">#</a> setGlobalQuery</h3><p>设置一个全局请求Query参数</p><p><code>@Apidoc\\After(event=&quot;setGlobalQuery&quot;,key=&quot;参数名&quot;,value=&quot;参数值&quot;,desc=&quot;参数描述&quot;)</code></p><h3 id="setglobalbody" tabindex="-1"><a class="header-anchor" href="#setglobalbody" aria-hidden="true">#</a> setGlobalBody</h3><p>设置一个全局请求Body参数</p><p><code>@Apidoc\\After(event=&quot;setGlobalBody&quot;,key=&quot;参数名&quot;,value=&quot;参数值&quot;,desc=&quot;参数描述&quot;)</code></p><h3 id="clearglobalheader" tabindex="-1"><a class="header-anchor" href="#clearglobalheader" aria-hidden="true">#</a> clearGlobalHeader</h3><p>清除一个全局请求头参数</p><p><code>@Apidoc\\Before(event=&quot;clearGlobalHeader&quot;,key=&quot;参数名&quot;)</code></p><h3 id="clearglobalquery" tabindex="-1"><a class="header-anchor" href="#clearglobalquery" aria-hidden="true">#</a> clearGlobalQuery</h3><p>清除一个全局请求Query参数</p><p><code>@Apidoc\\Before(event=&quot;clearGlobalQuery&quot;,key=&quot;参数名&quot;)</code></p><h3 id="clearglobalbody" tabindex="-1"><a class="header-anchor" href="#clearglobalbody" aria-hidden="true">#</a> clearGlobalBody</h3><p>清除一个全局请求Body参数</p><p><code>@Apidoc\\Before(event=&quot;clearGlobalBody&quot;,key=&quot;参数名&quot;)</code></p><h3 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> ajax</h3><p>发送一个请求</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * @Apidoc\\Before(event=&quot;ajax&quot;,url=&quot;请求地址&quot;,method=&quot;请求类型&quot;,contentType=&quot;appicateion-json&quot;,
 *    @Apidoc\\Before(event=&quot;setBody&quot;,key=&quot;key&quot;,value=&quot;body.phone&quot;),
 *    @Apidoc\\Before(event=&quot;setBody&quot;,key=&quot;abc&quot;,value=&quot;123456&quot;),
 *    @Apidoc\\After(event=&quot;setHeader&quot;,key=&quot;X-CSRF-TOKEN&quot;,value=&quot;res.data.data.token&quot;)
 * )
 * /
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上注解，会在接口调试前发送一个请求，请求参数为<code>{key:&quot;这个值为调试接口参数的phone字段&quot;,abc:&quot;123456&quot;}</code>，请求响应后执行<code>setHeader</code>设置一个key为<code>X-CSRF-TOKEN</code>的请求头参数，值为该请求返回值中的<code>res.data.data.token</code></p><h2 id="自定义事件" tabindex="-1"><a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a> 自定义事件</h2><h3 id="_1、事件定义" tabindex="-1"><a class="header-anchor" href="#_1、事件定义" aria-hidden="true">#</a> 1、事件定义</h3><details class="custom-container details"><summary>自定义方法参数说明</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>apidocFeConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// （选配）自定义调试时事件</span>
  <span class="token constant">DEBUG_EVENTS</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">//...,</span>
    <span class="token function">myEvent</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 必须为返回Promise</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token punctuation">{</span>
                event<span class="token punctuation">,</span>  <span class="token comment">// 当前事件的注解参数{event:事件名称，key:注解key，value:注解value}</span>
                config<span class="token punctuation">,</span> <span class="token comment">// 请求配置，修改该对象中的值直接影响当前调试的请求</span>
                value<span class="token punctuation">,</span>  <span class="token comment">// 事件注解中存在value参数时，返回当前请求中指定的参数值</span>
                result<span class="token punctuation">,</span> <span class="token comment">// 请求后执行事件时返回当前请求的响应结果</span>
                message <span class="token comment">// 事件执行结果的信息</span>
            <span class="token punctuation">}</span><span class="token operator">=</span>param<span class="token punctuation">;</span>
            <span class="token comment">// 这里按自己的逻辑实现</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 如果请求前修改请求参数</span>
                param<span class="token punctuation">.</span>config<span class="token punctuation">.</span>params<span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果请求后修改响应参数</span>
                param<span class="token punctuation">.</span>result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果要在事件执行请求处显示内容</span>
                param<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&quot;处理成功666&quot;</span>

                <span class="token comment">// 注意，处理成功必须调用resolve，参数为param</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment">// 注意，处理失败时必须调用reject，参数为执行结果显示内容</span>
                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;处理失败000&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在前端配置文件config.js配置中加入自定义事件，以下实现一个将当前请求拼成get的url</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>apidocFeConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// （选配）自定义调试时事件</span>
  <span class="token constant">DEBUG_EVENTS</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">//...,</span>
    <span class="token function">renderGetUrl</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 必须为返回Promise</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span>result<span class="token punctuation">}</span><span class="token operator">=</span>param
            <span class="token keyword">function</span> <span class="token function">urlEncode</span><span class="token punctuation">(</span><span class="token parameter">param<span class="token punctuation">,</span> key<span class="token punctuation">,</span> encode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> paramStr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> t <span class="token operator">==</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">||</span> t <span class="token operator">==</span> <span class="token string">&#39;boolean&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    paramStr <span class="token operator">+=</span> <span class="token punctuation">(</span>paramStr<span class="token operator">?</span><span class="token string">&#39;&amp;&#39;</span><span class="token operator">:</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>encode <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> encode<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">:</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">var</span> k <span class="token operator">=</span> key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> i<span class="token operator">:</span> key <span class="token operator">+</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token string">&#39;[&#39;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&#39;]&#39;</span><span class="token operator">:</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        paramStr <span class="token operator">+=</span> <span class="token function">urlEncode</span><span class="token punctuation">(</span>param<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> encode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> paramStr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">let</span> requestParams <span class="token operator">=</span> result<span class="token punctuation">.</span>config<span class="token punctuation">.</span>data
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>config<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                requestParams <span class="token operator">=</span> result<span class="token punctuation">.</span>config<span class="token punctuation">.</span>params
            <span class="token punctuation">}</span>
            <span class="token keyword">const</span> url <span class="token operator">=</span> result<span class="token punctuation">.</span>config<span class="token punctuation">.</span>baseURL <span class="token operator">+</span> result<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url<span class="token operator">+</span><span class="token function">urlEncode</span><span class="token punctuation">(</span>requestParams<span class="token punctuation">)</span>
            param<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;a href=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;  target=&quot;_blank&quot;  style=&quot;color:red&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a&gt;</span><span class="token template-punctuation string">\`</span></span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、事件调用" tabindex="-1"><a class="header-anchor" href="#_2、事件调用" aria-hidden="true">#</a> 2、事件调用</h3><p>1、接口注解调用</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * @Apidoc\\Title (&quot;测试自定义事件&quot;)
 * @Apidoc\\Method(&quot;GET&quot;)
 * @Apidoc\\Query(&quot;name&quot;,type=&quot;string&quot;,desc=&quot;姓名&quot;,mock=&quot;@cname&quot;)
 * @Apidoc\\Query(&quot;phone&quot;,type=&quot;string&quot;,desc=&quot;电话&quot;,mock=&quot;@phone&quot;)
 * @Apidoc\\After (event=&quot;renderGetUrl&quot;)
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">testMyEvent</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、全局调用</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>// config/apidoc.php
<span class="token php language-php"><span class="token delimiter important">&lt;?</span>
<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// 全局事件</span>
    <span class="token string single-quoted-string">&#39;debug_events&#39;</span><span class="token operator">=&gt;</span><span class="token punctuation">[</span>
        <span class="token comment">// &#39;before&#39;=&gt;[</span>
            <span class="token comment">// ...</span>
        <span class="token comment">// ],</span>
        <span class="token string single-quoted-string">&#39;after&#39;</span><span class="token operator">=&gt;</span><span class="token punctuation">[</span>
            <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;event&#39;</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">&#39;renderGetUrl&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、指定应用/版本调用</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>// config/apidoc.php
<span class="token php language-php"><span class="token delimiter important">&lt;?</span>
<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;apps&#39;</span>           <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Api接口&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;path&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;app\\controller&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;key&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;demo&#39;</span><span class="token punctuation">,</span>
            <span class="token comment">// 加入此配置</span>
            <span class="token string single-quoted-string">&#39;debug_events&#39;</span><span class="token operator">=&gt;</span><span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;after&#39;</span><span class="token operator">=&gt;</span><span class="token punctuation">[</span>
                    <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;event&#39;</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">&#39;renderGetUrl&#39;</span><span class="token punctuation">]</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
     <span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、执行效果" tabindex="-1"><a class="header-anchor" href="#_3、执行效果" aria-hidden="true">#</a> 3、执行效果</h3><p><img src="`+t+'" alt="debug-event-1"></p>',67),c=[p];function i(l,u){return s(),a("div",null,c)}const k=n(o,[["render",i],["__file","debugEvent.html.vue"]]);export{k as default};
