import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,a as p}from"./app.8b8f046f.js";const t={},e=p(`<h1 id="自动生成的url不对" tabindex="-1"><a class="header-anchor" href="#自动生成的url不对" aria-hidden="true">#</a> 自动生成的url不对？</h1><p>默认的自动生成接口url规则是将控制器目录地址+方法名，并根据配置过滤及处理指定的key来实现的，如默认的生成规则无法满足您项目的需求，可通过配置自定义处理函数来自行实现。</p><p>如下举例一些常见的处理方法：</p><h2 id="_1、thinkphp开启控制器后缀" tabindex="-1"><a class="header-anchor" href="#_1、thinkphp开启控制器后缀" aria-hidden="true">#</a> 1、ThinkPHP开启控制器后缀</h2><p>当ThinkPHP如下配置开启了控制器后缀的配置，导致自动生成的url比真实的url多出了Controller</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// config/route.php</span>

<span class="token comment">// 是否使用控制器后缀</span>
<span class="token string single-quoted-string">&#39;controller_suffix&#39;</span>     <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// config/apidoc.php</span>
<span class="token comment">//...</span>
<span class="token string single-quoted-string">&#39;auto_url&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token comment">// ...</span>
        <span class="token comment">// 处理url中每个key</span>
       <span class="token string single-quoted-string">&#39;handle_key&#39;</span><span class="token operator">=&gt;</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">return</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Controller&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、thinkphp多级路由的分割符" tabindex="-1"><a class="header-anchor" href="#_2、thinkphp多级路由的分割符" aria-hidden="true">#</a> 2、ThinkPHP多级路由的分割符</h2><p>有的同学使用多级路由时，分割符为<code>.</code>并不是<code>/</code>分割的，可通过自定义生成规则实现</p><p>解决方法：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// config/apidoc.php</span>
<span class="token comment">//...</span>
<span class="token string single-quoted-string">&#39;auto_url&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token comment">// ...</span>
        <span class="token comment">// 自定义url生成方法</span>
        <span class="token string single-quoted-string">&#39;custom&#39;</span> <span class="token operator">=&gt;</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span><span class="token variable">$method</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$urlArr</span>    <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$classPathArr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$urlArr</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$classPathArr</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$urlArr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token variable">$classPath</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token variable">$classPathArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;/&quot;</span><span class="token operator">.</span><span class="token variable">$urlArr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot;/&quot;</span><span class="token operator">.</span><span class="token variable">$classPath</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot;/&quot;</span><span class="token operator">.</span><span class="token variable">$method</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[e];function l(c,i){return s(),a("div",null,o)}const d=n(t,[["render",l],["__file","autoUrl.html.vue"]]);export{d as default};
